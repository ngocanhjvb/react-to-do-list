{"version":3,"sources":["component/TaskForm.js","component/TaskSearchControl.js","component/TaskSortControl.js","component/TaskControl.js","component/TaskItem.js","component/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","state","id","name","status","cancelForm","bind","onHandleChange","onHandleSubmit","this","props","itemEditing","setState","onClear","nextProps","nextContext","closeForm","e","target","value","preventDefault","onSubmit","className","type","onChange","required","onClick","React","Component","TaskSearchControl","onHandleSearch","search","onSearch","placeholder","TaskSortControl","sortBy","sortValue","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","TaskControl","TaskItem","onChangeStatus","onUpdateStatus","item","onDelete","onDeleteItem","onUpdate","onUpdateItem","randomstring","require","TaskList","generateData","filterName","filterStatus","tasks","generate","localStorage","setItem","JSON","stringify","onFilter","element","map","task","index","key","App","onStatusUpdate","_","findIndex","o","updateTask","filter","isDisplayForm","keyword","onShowForm","onCloseForm","parse","getItem","data","push","toLowerCase","sort","a","b","eleTaskForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.254a936f.chunk.js","sourcesContent":["import React from 'react';\n\nclass TaskForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            id: null,\n            name: '',\n            status: true,\n        }\n        this.cancelForm = this.cancelForm.bind(this)\n        this.onHandleChange = this.onHandleChange.bind(this)\n        this.onHandleSubmit = this.onHandleSubmit.bind(this)\n    }\n\n    componentWillMount() {\n        if (this.props.itemEditing && this.props.itemEditing.id !== null) {\n            this.setState({\n                id: this.props.itemEditing.id,\n                name: this.props.itemEditing.name,\n                status: this.props.itemEditing.status\n            });\n        } else {\n            this.onClear();\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.itemEditing && nextProps.itemEditing.id !== null) {\n            this.setState({\n                id: nextProps.itemEditing.id,\n                name: nextProps.itemEditing.name,\n                status: nextProps.itemEditing.status\n            });\n        } else {\n            this.onClear();\n        }\n    }\n\n    onClear() {\n        this.setState({\n            id: null,\n            name: '',\n            status: true\n        })\n    }\n\n    cancelForm() {\n        this.props.closeForm();\n    }\n\n    onHandleChange(e) {\n        let name = e.target.name\n        let value = e.target.value\n        if (name === 'status') {\n            value = e.target.value === 'true' ? true : false\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    onHandleSubmit(e) {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n    }\n\n\n    render() {\n        return (\n            <div className=\"panel panel-warning\">\n                <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">{this.props.itemEditing !== null ? 'Cập nhật công viec' : 'Thêm Công Việc'}</h3>\n                </div>\n                <div className=\"panel-body\">\n                    <form onSubmit={this.onHandleSubmit}>\n                        <div className=\"form-group\">\n                            <label>Tên :</label>\n                            <input\n                                type=\"text\" className=\"form-control\" name=\"name\" value={this.state.name}\n                                onChange={this.onHandleChange}\n                            />\n                        </div>\n                        <label>Trạng Thái :</label>\n                        <select className=\"form-control\" required=\"required\" name=\"status\"\n                                value={this.state.status}\n                                onChange={this.onHandleChange}>\n                            <option value={true}>Kích Hoạt</option>\n                            <option value={false}>Ẩn</option>\n                        </select>\n                        <br/>\n                        <div className=\"text-center\">\n                            <button type=\"submit\" className=\"btn btn-warning\">{this.props.itemEditing !== null ? 'Cập nhật' : 'Thêm'}</button>\n                            &nbsp;\n                            <button type=\"button\" onClick={this.cancelForm} className=\"btn btn-danger\">Hủy Bỏ</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n        )\n    }\n\n}\n\nexport default TaskForm;\n","import React from 'react';\n\nclass TaskSearchControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onHandleChange = this.onHandleChange.bind(this)\n        this.onHandleSearch = this.onHandleSearch.bind(this)\n        this.state = {\n            search: ''\n        }\n    }\n\n    onHandleChange(e) {\n        let value = e.target.value;\n        this.setState({\n            search: value\n        });\n    }\n\n    onHandleSearch() {\n        this.props.onSearch(this.state.search)\n    }\n\n    render() {\n        return (\n            <div className=\"input-group\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" name=\"search\"\n                       onChange={this.onHandleChange}/>\n                <span className=\"input-group-btn\">\n                                        <button className=\"btn btn-primary\" type=\"button\" onClick={this.onHandleSearch}>\n                                            <span className=\"fa fa-search mr-5\"></span>Tìm\n                            </button>\n                            </span>\n            </div>\n        )\n    }\n\n}\n\nexport default TaskSearchControl;\n","import React from 'react';\n\nclass TaskSortControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this)\n    }\n\n\n    onClick = (sortBy, sortValue) => {\n        this.props.onSort(sortBy, sortValue);\n    }\n\n    render() {\n        return (\n            <div className=\"dropdown\">\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\"\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                    Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\n                </button>\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                    <li onClick={() => this.onClick('name', 1)}>\n                        <a\n                            role=\"button\"\n                            className={(this.props.sortBy === 'name' && this.props.sortValue === 1) ? 'sort_selected' : ''}\n                        >\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\n                                    Tên A-Z\n                                </span>\n                        </a>\n                    </li>\n                    <li onClick={() => this.onClick('name', -1)}>\n                        <a\n                            role=\"button\"\n                            className={(this.props.sortBy === 'name' && this.props.sortValue === -1) ? 'sort_selected' : ''}\n                        >\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\n                                    Tên Z-A\n                                </span>\n                        </a>\n                    </li>\n                    <li role=\"separator\" className=\"divider\"></li>\n                    <li onClick={() => this.onClick('status', 1)}>\n                        <a\n                            role=\"button\"\n                            className={(this.props.sortBy === 'status' && this.props.sortValue === 1) ? 'sort_selected' : ''}\n                        >\n                            Trạng Thái Kích Hoạt\n                        </a>\n                    </li>\n                    <li onClick={() => this.onClick('status', -1)}>\n                        <a\n                            role=\"button\"\n                            className={(this.props.sortBy === 'status' && this.props.sortValue === -1) ? 'sort_selected' : ''}\n                        >\n                            Trạng Thái Ẩn\n                        </a>\n                    </li>\n                </ul>\n            </div>\n\n        )\n    }\n\n}\n\nexport default TaskSortControl;\n","import React from 'react';\nimport TaskSearchControl from \"./TaskSearchControl\";\nimport TaskSortControl from \"./TaskSortControl\";\n\nclass TaskControl extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"row mt-15\">\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                    {/*Search*/}\n                    <TaskSearchControl\n                        onSearch={this.props.onSearch}\n                    />\n                    {/*Search*/}\n                </div>\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                    {/*Sort*/}\n                    <TaskSortControl\n                        onSort={this.props.onSort}\n                        sortBy={this.props.sortBy}\n                        sortValue={this.props.sortValue}\n                    />\n                    {/*Sort*/}\n                </div>\n            </div>\n\n        )\n    }\n\n}\n\nexport default TaskControl;\n","import React from 'react';\n\nclass TaskItem extends React.Component {\n\n    onChangeStatus = () => {\n        this.props.onUpdateStatus(this.props.item.id)\n    }\n\n    onDelete = () => {\n        this.props.onDeleteItem(this.props.item.id)\n    }\n\n    onUpdate = () => {\n        this.props.onUpdateItem(this.props.item)\n    }\n\n    render() {\n        var {id, name, status} = this.props.item\n        return (\n            <tr>\n                <td>{id}</td>\n                <td>{name}</td>\n                <td className=\"text-center\">\n                                        <span\n                                            className={status ? 'label label-success' : 'label label-danger'}\n                                            onClick={this.onChangeStatus}\n                                        >\n                                            {status ? 'Kích Hoạt' : 'Ẩn'}\n                                                </span>\n                </td>\n                <td className=\"text-center\">\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={this.onUpdate}>\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\n                    </button>\n                    &nbsp;\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\n                    </button>\n                </td>\n            </tr>\n        )\n    }\n\n}\n\nexport default TaskItem;\n","import React from 'react';\nimport TaskItem from \"./TaskItem\";\n\nvar randomstring = require(\"randomstring\");\n\nclass TaskList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.generateData = this.generateData.bind(this);\n        this.state = {\n            filterName: '',\n            filterStatus: -1\n        }\n        this.onHandleChange = this.onHandleChange.bind(this)\n    }\n\n    generateData() {\n        var tasks = [\n            {\n                id: 1,\n                name: randomstring.generate(7),\n                status: true\n            },\n            {\n                id: 2,\n                name: randomstring.generate(7),\n                status: false\n            },\n            {\n                id: 3,\n                name: randomstring.generate(7),\n                status: false\n            }\n        ];\n        this.setState({\n            tasks: tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n    }\n\n    onHandleChange(e) {\n        let name = e.target.name;\n        let value = e.target.value;\n        this.props.onFilter(\n            name === 'filterName' ? value : this.state.filterName,\n            name === 'filterStatus' ? value : this.state.filterStatus\n        );\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render() {\n        var {tasks} = this.props;\n        var {filterName, filterStatus} = this.state;\n        var element = tasks.map((task, index) => {\n            return (<TaskItem\n                    key={index}\n                    item={task}\n                    onUpdateStatus={this.props.onUpdateStatus}\n                    onDeleteItem={this.props.onDeleteItem}\n                    onUpdateItem={this.props.onUpdateItem}\n                />\n            )\n        })\n        return (\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <button className=\"btn btn-danger\" onClick={this.generateData}>Tạo 3 data mẫu</button>\n                <table className=\"table table-bordered table-hover\">\n                    <thead>\n                    <tr>\n                        <th className=\"text-center\">STT</th>\n                        <th className=\"text-center\">Tên</th>\n                        <th className=\"text-center\">Trạng Thái</th>\n                        <th className=\"text-center\">Hành Động</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <input type=\"text\" className=\"form-control\" name=\"filterName\" value={filterName}\n                                   onChange={this.onHandleChange}/>\n                        </td>\n                        <td>\n                            <select className=\"form-control\" name=\"filterStatus\" onChange={this.onHandleChange}\n                                    value={filterStatus}>\n                                <option value=\"-1\">Tất Cả</option>\n                                <option value=\"0\">Ẩn</option>\n                                <option value=\"1\">Kích Hoạt</option>\n                            </select>\n                        </td>\n                        <td></td>\n                    </tr>\n                    {element}\n                    </tbody>\n                </table>\n            </div>\n\n\n        )\n    }\n\n}\n\nexport default TaskList;\n","import React from 'react';\nimport './App.css';\nimport TaskForm from \"./component/TaskForm\";\nimport TaskControl from \"./component/TaskControl\";\nimport TaskList from \"./component/TaskList\";\nimport _ from 'lodash';\n\n\nvar randomstring = require(\"randomstring\");\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            isDisplayForm: false,\n            itemEditing: null,\n            filter: {\n                name: '',\n                status: -1\n            },\n            keyword: ''\n        }\n        this.onShowForm = this.onShowForm.bind(this)\n        this.onCloseForm = this.onCloseForm.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onFilter = this.onFilter.bind(this)\n        this.onSearch = this.onSearch.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            tasks: JSON.parse(localStorage.getItem('tasks'))\n        })\n    }\n\n    onShowForm() {\n        this.setState({\n            isDisplayForm: true,\n            itemEditing: null\n        });\n\n    }\n\n    onCloseForm() {\n        this.setState({\n            isDisplayForm: false,\n            itemEditing: null\n        });\n    }\n\n    onSubmit(data) {\n        let {tasks} = this.state;\n        if (data.id === null) {\n            data.id = randomstring.generate(5)\n            tasks.push(data)\n        } else {\n            tasks = tasks.map((item, index) => {\n                if (item.id === data.id) {\n                    item = data\n                }\n                return item\n            })\n        }\n        this.setState({\n            tasks: tasks,\n            itemEditing: null\n        })\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n        this.onCloseForm();\n    }\n\n    onStatusUpdate = (id) => {\n\n        let {tasks} = this.state;\n        var index = _.findIndex(tasks, function(o) { return o.id == id; });\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n            tasks: tasks\n        })\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n\n    }\n\n    onDeleteItem = (id) => {\n        let {tasks} = this.state;\n        let updateTask = tasks.filter(item => item.id !== id);\n        this.setState({\n            tasks: updateTask\n        })\n        localStorage.setItem('tasks', JSON.stringify(updateTask))\n    }\n\n    onUpdateItem = (task) => {\n        this.setState({\n            itemEditing: task,\n            isDisplayForm: true\n        })\n    }\n\n    onFilter(filterName, filterStatus) {\n        this.setState({\n            filter: {\n                name: filterName.toLowerCase(),\n                status: filterStatus\n            }\n        })\n    }\n\n    onSearch(keyword) {\n        this.setState({\n            keyword: keyword.toLowerCase()\n        })\n    }\n\n    onSort = (sortBy, sortValue) => {\n        this.setState({\n            sortBy: sortBy,\n            sortValue: sortValue\n        })\n    }\n\n    render() {\n        var {tasks, isDisplayForm, itemEditing, filter, keyword, sortBy, sortValue} = this.state;\n        if (filter) {\n            if (filter.name) {\n                tasks = tasks.filter((task) => {\n                    return task.name.toLowerCase().search(filter.name) !== -1\n                })\n            }\n            if (filter.status) {\n                tasks = tasks.filter((task) => {\n                    if (filter.status == -1) {\n                        return task\n                    } else {\n                        return task.status == (filter.status == 1)\n                    }\n                })\n            }\n        }\n        if (keyword) {\n            tasks = tasks.filter((task) => {\n                return task.name.toLowerCase().search(keyword) !== -1\n            })\n        }\n\n        if(sortBy === 'name'){\n            tasks.sort((a, b) => {\n                if(a.name > b.name) return sortValue;\n                else if(a.name < b.name) return -sortValue;\n                else return 0;\n            });\n        }else{\n            tasks.sort((a, b) => {\n                if(a.status > b.status) return -sortValue;\n                else if(a.status < b.status) return sortValue;\n                else return 0;\n            });\n        }\n\n\n        var eleTaskForm = isDisplayForm ? <TaskForm\n            onSubmit={this.onSubmit}\n            closeForm={this.onCloseForm}\n            itemEditing={itemEditing}\n        /> : ''\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr/>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                        {/*form*/}\n                        {eleTaskForm}\n                        {/*form*/}\n                    </div>\n                    <div\n                        className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onShowForm}>\n                            <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                        </button>\n                        {/*Controler*/}\n                        <TaskControl\n                            onSearch={this.onSearch}\n                            onSort={this.onSort}\n                            sortBy={sortBy}\n                            sortValue={sortValue}\n                        />\n                        {/*Controler*/}\n                        <div className=\"row mt-15\">\n                            {/*List*/}\n                            <TaskList\n                                tasks={tasks}\n                                onUpdateStatus={this.onStatusUpdate}\n                                onDeleteItem={this.onDeleteItem}\n                                onUpdateItem={this.onUpdateItem}\n                                onFilter={this.onFilter}\n                            />\n                            {/*List*/}\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}